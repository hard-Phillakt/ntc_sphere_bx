/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

/*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */

/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------------------------
 * TICKER
 * --------------------------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------------------------
 * TRANSFORMS
 * --------------------------------------------------------------------------------------
 */

/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */

/*
* -------------------------------------------------
* EASING
* -------------------------------------------------
*/

/*
_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
	let cycleDuration = duration + repeatDelay,
		time = _round(clampedTotalTime % cycleDuration);
	if (time > duration) {
		time = duration;
	}
	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
},
*/

/* 0 */

/* 1 */

/* 2 */

/* 3 */

/* Attributes
	---------------------------------------------------------------------- */

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */

/* Contains
	---------------------------------------------------------------------- */

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */

/* Internal Use Only */

/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */

/* QSA/matchesSelector
	---------------------------------------------------------------------- */

/* Sorting
	---------------------------------------------------------------------- */

/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */

/* WEBPACK VAR INJECTION */

/* className feature (about 0.4kb gzipped).
  , className(plugin, target, property, endValue, tween) {
  	let _renderClassName = (ratio, data) => {
  			data.css.render(ratio, data.css);
  			if (!ratio || ratio === 1) {
  				let inline = data.rmv,
  					target = data.t,
  					p;
  				target.setAttribute("class", ratio ? data.e : data.b);
  				for (p in inline) {
  					_removeProperty(target, p);
  				}
  			}
  		},
  		_getAllStyles = (target) => {
  			let styles = {},
  				computed = getComputedStyle(target),
  				p;
  			for (p in computed) {
  				if (isNaN(p) && p !== "cssText" && p !== "length") {
  					styles[p] = computed[p];
  				}
  			}
  			_setDefaults(styles, _parseTransform(target, 1));
  			return styles;
  		},
  		startClassList = target.getAttribute("class"),
  		style = target.style,
  		cssText = style.cssText,
  		cache = target._gsap,
  		classPT = cache.classPT,
  		inlineToRemoveAtEnd = {},
  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
  		changingVars = {},
  		startVars = _getAllStyles(target),
  		transformRelated = /(transform|perspective)/i,
  		endVars, p;
  	if (classPT) {
  		classPT.r(1, classPT.d);
  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
  	}
  	target.setAttribute("class", data.e);
  	endVars = _getAllStyles(target, true);
  	target.setAttribute("class", startClassList);
  	for (p in endVars) {
  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
  			changingVars[p] = endVars[p];
  			if (!style[p] && style[p] !== "0") {
  				inlineToRemoveAtEnd[p] = 1;
  			}
  		}
  	}
  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
  	}
  	_parseTransform(target, true); //to clear the caching of transforms
  	data.css = new gsap.plugins.css();
  	data.css.init(target, changingVars, tween);
  	plugin._props.push(...data.css._props);
  	return 1;
  }
  */

/* eslint no-bitwise: ["error", { "allow": [">>"] }] */

/* eslint no-param-reassign: "off" */

/* eslint no-underscore-dangle: "off" */

/* eslint no-unused-expressions: "off" */

/* eslint no-unused-vars: "off" */

/* eslint-disable */

/* eslint-disable eqeqeq */

/* eslint-disable no-cond-assign */

/* eslint-disable no-loop-func */

/* eslint-enable eqeqeq */

/* eslint-enable no-cond-assign */

/* eslint-enable no-loop-func */

/* getElement(s)By*
	---------------------------------------------------------------------- */

/* global Symbol */

/* harmony default export */

/* harmony export (binding) */

/* jshint -W018 */

/* jshint validthis:true */

/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/

/* unused concated harmony import Back */

/* unused concated harmony import Bounce */

/* unused concated harmony import CSSPlugin */

/* unused concated harmony import Circ */

/* unused concated harmony import Cubic */

/* unused concated harmony import Elastic */

/* unused concated harmony import Expo */

/* unused concated harmony import Linear */

/* unused concated harmony import Power0 */

/* unused concated harmony import Power1 */

/* unused concated harmony import Power2 */

/* unused concated harmony import Power3 */

/* unused concated harmony import Power4 */

/* unused concated harmony import Quad */

/* unused concated harmony import Quart */

/* unused concated harmony import Quint */

/* unused concated harmony import Sine */

/* unused concated harmony import SteppedEase */

/* unused concated harmony import Strong */

/* unused concated harmony import TimelineLite */

/* unused concated harmony import TimelineMax */

/* unused concated harmony import TweenLite */

/* unused harmony export TweenMax */

/* unused harmony export gsap */

/*!
 * 
 *   typed.js - A JavaScript Typing Animation Library
 *   Author: Matt Boldt <me@mattboldt.com>
 *   Version: v2.0.11
 *   Url: https://github.com/mattboldt/typed.js
 *   License(s): MIT
 * 
 */

/*!
 * CSSPlugin 3.2.6
 * https://greensock.com
 *
 * Copyright 2008-2020, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/*!
 * GSAP 3.2.6
 * https://greensock.com
 *
 * @license Copyright 2008-2020, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */

/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */

/*#__PURE__*/

/**
	     * Adds a CSS class to fade out current string
	     * @private
	     */

/**
	     * Backspace HTML tags and HTML Characters
	     * @param {string} curString Current string
	     * @param {number} curStrPos Position in current string
	     * @param {Typed} self instance of Typed
	     * @returns {number} a new string position
	     * @private
	     */

/**
	     * Backspaces 1 character at a time
	     * @param {string} curString the current string in the strings array
	     * @param {number} curStrPos the current position in the curString
	     * @private
	     */

/**
	     * Begins the typing animation
	     * @private
	     */

/**
	     * Called for each character typed
	     * @param {string} curString the current string in the strings array
	     * @param {number} curStrPos the current position in the curString
	     * @private
	     */

/**
	     * Continue to the next string & begin typing
	     * @param {string} curString the current string in the strings array
	     * @param {number} curStrPos the current position in the curString
	     * @private
	     */

/**
	     * Destroy this instance of Typed
	     * @public
	     */

/**
	     * Full animation is complete
	     * @private
	     */

/**
	     * Has the typing been stopped
	     * @param {string} curString the current string in the strings array
	     * @param {number} curStrPos the current position in the curString
	     * @param {boolean} isTyping
	     * @private
	     */

/**
	     * If using input elements, bind focus in order to
	     * start and stop the animation
	     * @private
	     */

/**
	     * Load up defaults & options on the Typed instance
	     * @param {Typed} self instance of Typed
	     * @param {object} options options object
	     * @param {string} elementId HTML element ID _OR_ instance of HTML element
	     * @private
	     */

/**
	     * On init, insert the cursor element
	     * @private
	     */

/**
	     * Replaces current text in the HTML element
	     * depending on element type
	     * @param {string} str
	     * @private
	     */

/**
	     * Reset Typed and optionally restarts
	     * @param {boolean} restart
	     * @public
	     */

/**
	     * Shuffle the sequence of the strings array
	     * @private
	     */

/**
	     * Speed in MS to type
	     * @param {number} speed
	     * @private
	     */

/**
	     * Start typing / backspacing after being stopped
	     * @public
	     */

/**
	     * Stop typing / backspacing and enable cursor blinking
	     * @public
	     */

/**
	     * Toggle the blinking cursor
	     * @param {boolean} isBlinking
	     * @private
	     */

/**
	     * Type HTML tags & HTML Characters
	     * @param {string} curString Current string
	     * @param {number} curStrPos Position in current string
	     * @param {Typed} self instance of Typed
	     * @returns {number} a new string position
	     * @private
	     */

/**
	     * We're done typing the current string
	     * @param {string} curString the current string in the strings array
	     * @param {number} curStrPos the current position in the curString
	     * @private
	     */

/**
	   * @property {array} strings strings to be typed
	   * @property {string} stringsElement ID of element containing string children
	   */

/**
	   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input
	   */

/**
	   * @property {boolean} fadeOut Fade out instead of backspace
	   * @property {string} fadeOutClass css class for fade animation
	   * @property {boolean} fadeOutDelay Fade out delay in milliseconds
	   */

/**
	   * @property {boolean} loop loop strings
	   * @property {number} loopCount amount of loops
	   */

/**
	   * @property {boolean} showCursor show cursor
	   * @property {string} cursorChar character for cursor
	   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>
	   */

/**
	   * @property {boolean} shuffle shuffle the strings
	   */

/**
	   * @property {boolean} smartBackspace only backspace what doesn't match the previous string
	   */

/**
	   * @property {number} backDelay time before backspacing in milliseconds
	   */

/**
	   * @property {number} backSpeed backspacing speed in milliseconds
	   */

/**
	   * @property {number} startDelay time before typing starts in milliseconds
	   */

/**
	   * @property {number} typeSpeed type speed in milliseconds
	   */

/**
	   * @property {string} attr attribute for typing
	   * Ex: input placeholder, value, or just HTML text
	   */

/**
	   * @property {string} contentType 'html' or 'null' for plaintext
	   */

/**
	   * After destroy
	   * @param {Typed} self
	   */

/**
	   * After each string is typed
	   * @param {number} arrayPos
	   * @param {Typed} self
	   */

/**
	   * After reset
	   * @param {Typed} self
	   */

/**
	   * After start
	   * @param {number} arrayPos
	   * @param {Typed} self
	   */

/**
	   * After stop
	   * @param {number} arrayPos
	   * @param {Typed} self
	   */

/**
	   * All typing is complete
	   * @param {Typed} self
	   */

/**
	   * Before each string is typed
	   * @param {number} arrayPos
	   * @param {Typed} self
	   */

/**
	   * Before it begins typing
	   * @param {Typed} self
	   */

/**
	   * During looping, after last string is typed
	   * @param {Typed} self
	   */

/**
	   * Toggle start() and stop() of the Typed instance
	   * @public
	   */

/**
	   * Typing has been started after being stopped
	   * @param {number} arrayPos
	   * @param {Typed} self
	   */

/**
	   * Typing has been stopped
	   * @param {number} arrayPos
	   * @param {Typed} self
	   */

/**
	 * Defaults & options
	 * @returns {object} Typed defaults & options
	 * @public
	 */

/**
	 * TODO: These methods can probably be combined somehow
	 * Parse HTML tags & HTML Characters
	 */

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */

/**
 * Dom7 2.1.3
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * http://framework7.io/docs/dom.html
 *
 * Copyright 2019, Vladimir Kharlampidi
 * The iDangero.us
 * http://www.idangero.us/
 *
 * Licensed under MIT
 *
 * Released on: February 11, 2019
 */

/**
 * Load a url into a page
 */

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */

/**
 * SSR Window 1.0.1
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2018, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: July 18, 2018
 */

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */

/**
 * Swiper 5.3.8
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * http://swiperjs.com
 *
 * Copyright 2014-2020 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: April 24, 2020
 */

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */

/************************************************************************/

/******/

/***/

//

// 				_propagateYoyoEase(child.timeline, isYoyo);

// 				child._ease = child._yEase;

// 				child._yEase = ease;

// 				child._yoyo = isYoyo;

// 				ease = child._ease;

// 			_propagateYoyoEase(child, isYoyo);

// 			if (child.timeline) {

// 			}

// 			} else {

// 		animation = animation.parent;

// 		b = ratio - o,

// 		c = ratio + o;

// 		child = child._next;

// 		if (child instanceof Timeline) {

// 		let tl = new Timeline();

// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));

// 		time = animation._start + time / (animation._ts || 1);

// 		time = arguments.length ? rawTime : animation.rawTime();

// 		}

// 		} else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {

// 	Tween.prototype[name] = function() {

// 	let animation = this,

// 	let child = timeline._first, ease;

// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),

// 	let y = 0.5 + ratio / 2;

// 	parent._time = _ticker.time - parent._start;

// 	ratio = .5 + ratio / 2;

// 	return p => (2 * (1 - p) * p * y + p * p);

// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;

// 	return time;

// 	while (animation) {

// 	while (child) {

// 	}

//     Animate the slider.

//     Go to next slide and

//     emit a scroll event.

//    - Any

//    - Node.DOCUMENT_NODE

//    - Node.ELEMENT_NODE

//    at least P (P=1?) larger than the most recent event's delta?

//    documentElement of the parent window

//   .css('--customProperty) (#3144)

//   .css('filter') (IE 9 only, #12537)

//   1. An object of properties

//   1. No key was specified

//   1. The entire cache object

//   2. A key and value

//   2. A string key was specified, but no value provided

//   2. The data stored at the key

//   Don't go any further (avoid insignificant scroll movement).

//   Go to prev slide and

//   If direction has changed or

//   If the slider hasn't hit the latest slide or

//   Return now so you don't hit the preventDefault.

//   but not by others (comment: 8; processing instruction: 7; etc.)

//   emit a scroll event.

//   https://html.spec.whatwg.org/multipage/forms.html#category-listed

//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled

//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled

//   if the scroll is quicker than the previous one:

//   if the slider is a loop and

//   if the slider isn't moving right now:

//  - Node

//  - Object

// "Attribute values must be CSS identifiers [capture 5]

// "Whether an element is represented by a :lang() selector

// "px" to a few hardcoded values.

// "this is a `string to print NOW` ..."

// #1450: sometimes IE returns 1223 when it should be 204

// #14683: Only rethrow if this hasn't been notified as an error yet

// #9682: remove data so that it's not used in an eventual retry

// '.swipe-handler',

// 'bullets' or 'progressbar' or 'fraction' or 'custom'

// 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

// ( event )  dispatched jQuery.Event

// ( namespace ) or ( selector, types [, fn] )

// ( types [, fn] )

// ( types, data, fn )

// ( types, fn )

// ( types, selector, fn )

// ( types-Object, data )

// ( types-Object, selector, data )

// ( types-object [, selector] )

// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)

// (Currently working only if just one of the axes is enabled)

// (Set the new translation and append initial inline transforms.)

// (and therefore has an element appears at this[ 0 ]) and the

// (avoids potential for endless recursion during removal of special event handlers)

// (excepting DocumentFragment context, where the methods don't exist)

// (excepting IE8 booleans)

// (focus and blur are always synchronous in other supported browsers,

// (focus or blur), assume that the surrogate already propagated from triggering the

// (i.e., `typeof document.createElement( "object" ) === "function"`).

// (it can always be set on a per-request basis or even using ajaxSetup)

// (no matter how long the jqXHR object will be used)

// (returning the new matched element set)

// (such as Node.js), expose a factory as module.exports.

// (the latter of which guarantees us context)

// (via `this.document`) & document (via `this`).

// (we check in cache first)

// (x1,y1) is the known point before given value,

// (x3,y3) is the known point after given value.

// * false: [ value ].slice( 0 ) => resolve( value )

// * listed form-associated elements in a disabled fieldset

// * option elements in a disabled optgroup

// * true: [ value ].slice( 1 ) => resolve()

// *native* events that it fires directly, ensuring that state changes have

// ---- EXTRA PLUGINS --------------------------------------------------------

// ------------------------------------------

// ... .then handlers, argument index, [final state]

// ...and capture the result

// ...and disregard older resolution values

// ...but misinterprets leading-number strings, particularly hex literals ("0x...")

// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)

// ...in a gzip-friendly way

// ...intermediate processing is necessary

// ...otherwise use results directly

// .get() because push.apply(_, arraylike) throws on ancient WebKit

// 1) For the element inside the iframe without offsetParent, this method will return

// 1. Copy private data: events, handlers, etc.

// 1. do all N events have decreasing or same (absolute value) delta?

// 2) For the hidden or detached element

// 2. Copy user data

// 2. did all N events arrive in the last M (M=500?) msecs?

// 3) For body or html element, i.e. in case of the html node - it will return itself

// 3. does the earliest event have an (absolute value) delta that's

// 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?

// :(first|last|only)-(child|of-type)

// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),

// <object> elements with no `data` attribute has an object

// A central reference to the root jQuery(document)

// A counter to track how many items to wait for before

// A cross-domain request is in order when the origin doesn't match the current origin.

// A fallback to window.onload, that will always work

// A global GUID counter for objects

// A match means we're done; a fail means we have to keep checking

// A simple way to check for HTML strings

// A special extend for ajax options

// A tribute to the "awesome hack by Dean Edwards"

// Abort any current/pending executions

// Abort any pending executions

// Abort handling of the native event

// Abort if not done already and return

// Abort if there are pending holds or we're already ready

// Aborting is no longer a cancellation

// Accept quoted arguments as-is

// Accepts only:

// Accessing document.activeElement can throw unexpectedly

// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

// Accessing the selectedIndex property

// Accessing this property makes selected-by-default

// Account for positive content-box scroll gutter when requested by providing computedVal

// Account for the *real* offset parent, which can be the document or its root element

// Account for unreliable border-box dimensions by comparing offset* to computed and

// Accounts for blinking while paused

// Activate thumbs

// Active classes

// Actual Callbacks object

// Actual callback list

// Add Classes

// Add a callback or a collection of callbacks to the list

// Add a progress sentinel to prevent the fx queue from being

// Add button/input type pseudos

// Add elements passing elementMatchers directly to results

// Add elements to results, through postFinder if defined

// Add event listeners

// Add in properties whose names you wish to fix before

// Add in style property hooks for overriding the default

// Add list-specific methods

// Add matches to results

// Add nodes directly

// Add or update anti-cache param if needed

// Add padding

// Add protocol if not provided (prefilters might expect it)

// Add the old object onto the stack (as a reference)

// Add the remaining (directly-bound) handlers

// Add the top/left cssHooks using jQuery.fn.position

// Add to the element's handler list, delegates in front

// Add which for click: 1 === left; 2 === middle; 3 === right

// Add which for key events

// Adding a temporary attribute to the document before the selection works

// Adjust for the element's box model

// Adjustment may not be necessary

// Alias method option to type as per ticket #12004

// All done!

// All others

// All such elements have a "form" property.

// All systems go!

// Allow custom headers/mimetypes and early abort

// Allow instantiation without the 'new' keyword

// Allow onerror to be called first,

// Allow percentage to make a relative stretch for responsive sliders

// Allow special events to draw outside the lines

// Allow to recalculate the initial values whenever we want

// Also disable .add unless we have memory (since it would have no effect)

// Also prevent it if we're currently inside a leveraged native-event stack

// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

// Also, because there's some remaining momentum we'll bias the snap in the

// Also, save errorCallback to a variable

// Always assume duplicates if they aren't passed to the comparison function

// Always return an empty object.

// Always skip document fragments

// Always use camelCase key (gh-2257)

// An input loses its value after becoming a radio

// Anchor tag for parsing the document origin

// Anchor's host property isn't correctly set when s.url is relative

// Android

// Android Browser returns percentage for some values,

// Animate inline elements as inline-block

// Animations created synchronously will run synchronously

// Any relative (+/-) values have already been

// Append to fragment

// Apply converter (if not an equivalence)

// Apply custom fields if provided

// Apply postFilter

// Apply prefilters

// Apply relative offset (+=/-=) if specified

// Apply set filters to unmatched elements

// Apply the dataFilter if provided

// Argument "data" should be string of html

// Array of elements or instance of Dom

// Arraylike of elements (jQuery, arguments, Array)

// As in, an element does not contain itself

// As of jQuery 3.0, isNumeric is limited to

// As well, disconnected nodes are said to be in a document

// Assign to newCache so results back-propagate to previous elements

// Assign undefined instead of using delete, see Data#remove

// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes

// Assume jQuery is ready without the ready module

// Assume position:fixed implies availability of getBoundingClientRect

// Assume that strings that start and end with <> are HTML and skip the regex check

// Assumes a single number if not a string

// Assuming integer scroll gutter, subtract the rest and round down

// Attach a single capturing handler on the document while someone wants focusin/focusout

// Attach callbacks from options

// Attach deferreds

// Attach events

// Attach/Detach Events

// Attempt to "discover" the data in

// Attempt to get data from the cache

// Attribute hooks are determined by the lowercase version

// Attribute names can contain non-HTML whitespace characters

// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors

// Autoheight

// Avoid an infinite loop by temporarily removing this function from the getter

// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression

// Avoid hanging onto element (issue #299)

// Back compat <1.8 extension point

// Bail out if this is a no-op like .hide().hide()

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

// Base inspection function for prefilters and transports

// Based off of the plugin by Clint Helfers, with permission.

// Because of that, this security measure has to be disabled in Safari 8.

// Behaves like an Array's method, not like a jQuery method.

// Behavior in IE 9 is more subtle than in newer versions & it passes

// Bind a function to a context, optionally partially applying any

// Bind script tag hack transport

// Black-hole SVG <use> instance trees (trac-13180)

// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347

// Boolean attributes and "value" are not treated correctly

// Boolean properties

// Both box models exclude margin

// Breakpoints

// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)

// Build QSA regex

// Build a new jQuery matched element set

// Building a settings object

// Builds headers hashtable if needed

// Bulk operations run against the entire set

// But maintain support for old signatures

// Buttery smooth parallax library

// By default, rellax class

// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too

// CONCATENATED MODULE: ./node_modules/dom7/dist/dom7.modular.js

// CONCATENATED MODULE: ./node_modules/gsap/CSSPlugin.js

// CONCATENATED MODULE: ./node_modules/gsap/gsap-core.js

// CONCATENATED MODULE: ./node_modules/gsap/index.js

// CONCATENATED MODULE: ./node_modules/ssr-window/dist/ssr-window.esm.js

// CONCATENATED MODULE: ./node_modules/swiper/js/swiper.esm.bundle.js

// CSS escapes

// CSS string/identifier serialization

// Cache response headers

// Cache the compiled function

// Cache the index of each encountered element

// Cache the tokens

// Caches the header

// Calc Scale From Multi-touches

// Calculate position if both inputs belong to the same document

// Call a native DOM method on the target with the same name as the event.

// Call all callbacks with the given context and arguments

// Call all the callbacks with the given arguments

// Call an optional hook to record the stack, in case of exception

// Call given func if any

// Call if it was a function and we have a response

// Call the postDispatch hook for the mapped type

// Call the preDispatch hook for the mapped type, and let it bail if desired

// Callback

// Callback for when everything is done

// Callbacks

// Callbacks context

// Caller can pass in a jQuery.Event object, Object, or just an event type string

// Caller can pass in an object of custom data in lieu of the handler

// Can add propHook for "elements" to filter or add form elements

// Can be adjusted by the user

// Can use an empty set, since event contains the info

// Can't trust NodeList.length

// Cancel the outer synthetic event

// Cancel the request

// Capture executables

// Capture the context ID, setting it first if necessary

// Cast descendant combinators to space

// Catch cases where $(document).ready() is called

// Certain elements can have dimension info if we invisibly show them

// Check against all ancestor/preceding elements

// Check against closest ancestor/preceding element

// Check attachment across shadow DOM boundaries when possible (gh-3504)

// Check each className given, space separated list

// Check for headers option

// Check for inherited disabledness on relevant non-disabled elements:

// Check for promise aspect first to privilege synchronous behavior

// Check for vendor prefixed names

// Check if a given callback is in the list.

// Check if a limit is defined (first "min", then "max");

// Check if a max limit is defined

// Check if a min limit is defined

// Check if b follows a

// Check if directional max limits are defined

// Check if directional min limits are defined

// Check if getElementById returns elements by name

// Check if getElementsByTagName("*") returns only elements

// Check if module is in cache

// Check if the owner object already has a cache

// Check if there is some text in the element, if yes start by backspacing the default message

// Check if we need to change the Y or the X

// Check if we're dealing with a known content-type

// Check if we're setting a value

// Check readyState before timeout as it changes

// Check state lost if the name is set (#11217)

// Check that swiper should be inside of visible area of window

// Check to see if it's possible to do matchesSelector

// Check to see if we have a response for the expected dataType

// Children needs to return slot items

// Choose the first element that is related to our preferred document

// Claim the first handler

// Class

// Class selector

// Classes

// Classes and attributes

// Clean up if we're done firing for good

// Clean up the event in case it is being reused

// Clean-up function (fires after converters)

// Cleanup styles

// Clear all callbacks and values

// Clear input after sorting to release objects

// Clear the animation loop to prevent possible memory leak

// Clear timeout if it exists

// Clear up the last queue stop function

// Clicks

// Clone any incoming data and prepend the event, creating the handler arg list

// Coalesce documents and windows

// Combinators

// Comma and first run

// Compile and execute a filtering function if one is not provided

// Complete

// Condense equivalence converters

// Console exists when dev tools are open, which can happen at any time

// Contents

// Context for global events is callbackContext if it is a DOM node or jQuery collection

// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:

// Convert "+=" or "-=" to relative numbers (#7345)

// Convert "normal" to computed value

// Convert String-formatted options into Object-formatted ones

// Convert anything to text

// Convert dashed to camelCase; used by the css and data modules

// Convert data if not already a string

// Convert html into DOM nodes

// Convert no matter what (that way responseXXX fields are always set)

// Convert non-html into a text node

// Convert options from String-formatted to Object-formatted if needed

// Convert response if prev dataType is non-auto and differs from current

// Convert to each sequential dataType

// Convert to pixels if value adjustment is needed

// Copy the events from the original to the clone

// Copy the properties one-by-one to the cache object

// Copyright (c) 2016 Moe Amaya (@moeamaya)

// Counter for holding the number of active queries

// Create a new module (and put it into the cache)

// Create a timestamp if incoming event doesn't have one

// Create array-like object

// Create converters map with lowercased keys

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

// Create loop

// Create mouseenter/leave events using mouseover/out and event-time checks

// Create scrollLeft and scrollTop methods

// Create target properties

// Create the abort callback

// Create the final options object

// Creates a full fledged settings object into target

// Cross domain only allowed if supported through XMLHttpRequest

// Cross-browser xml parsing

// Current/Total

// Cursor

// Data converters

// Default Settings

// Default abort message

// Default jsonp settings

// Default process is resolve

// Default speed

// Default value for a checkbox should be "on"

// Defend against cloned attroperties (jQuery gh-1709)

// Deferred helper

// Deferred#then to conditionally suppress rejection.

// Deferreds

// Define a local copy of jQuery

// Define if we need image drag

// Define the hook, we'll check on the first run if it's really needed.

// Defining this global in .eslintrc.json would create a danger of using the global

// Delegate to script

// Deprecated

// Dereference transport for early garbage collection

// Descend through wrappers to the right content

// Deserialize a standard representation

// Desktop

// Destroy loop

// Detach an event or set of events from an element

// Detach emitter events

// Detach events

// Detached nodes confoundingly follow *each other*

// Detect misreporting of content dimensions for box-sizing:border-box elements

// Detect obvious negatives

// Detect overflow:scroll screwiness (gh-3699)

// Detect show/hide animations

// Detect silently failing push.apply

// Detect, normalize options and install callbacks for jsonp requests

// Determine event propagation path in advance, per W3C events spec (#9951)

// Determine handlers

// Determine if request has content

// Determine if successful

// Determine new display value for elements that need to change

// Determine relevant movement directions

// Determine the position of an element within the set

// Directions locks

// Disable .fire

// Disable .fire and .add

// Disable locks on resize

// Disable swiper and hide navigation when container not overflow

// Discard index placeholder values to get only actual matches

// Discard the second event of a jQuery.event.trigger() and

// Disconnected elements can have computed display: none, so first confirm that elem is

// Disconnected nodes

// Do a sibling check if the nodes have a common ancestor

// Do not include comment or processing instruction nodes

// Do not traverse comment nodes

// Do send the request (this may raise an exception)

// Do the same for pointerenter/pointerleave and pointerover/pointerout

// Document context

// Document order sorting

// Dom manipulation

// Don't animate until we get a position updating event

// Don't automatically add "px" to these possibly-unitless properties

// Don't bother continuing without a callback

// Don't check non-elements (#13208)

// Don't conflict with Object.prototype properties (#13203)

// Don't consume trailing commas as valid

// Don't do default actions on window, that's where global variables be (#6170)

// Don't do events on text and comment nodes

// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)

// Don't get fooled by Object.prototype properties (jQuery #13807)

// Don't get tricked when zoom affects offsetWidth (gh-4029)

// Don't get/set attributes on text, comment and attribute nodes

// Don't get/set properties on text, comment and attribute nodes

// Don't keep the element (issue #299)

// Don't match elem in the :animated selector

// Don't pass non-elements to Sizzle

// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)

// Don't re-trigger an onFOO event when we call its FOO() method

// Don't return options that are disabled or in a disabled optgroup

// Don't set styles on text and comment nodes

// Duplicate to all looped slides

// Each slide offset from center

// Early iOS 10 versions support `attachShadow` but not `getRootNode`,

// Easily-parseable/retrievable ID or TAG or CLASS selectors

// Easy API for creating new setFilters

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1

// Effects

// Element contains another

// Element context

// Element/input types

// Else (the user is scrolling towards the beginning) and

// Else (this is the first time the wheel is moved):

// Emit

// Emit event

// Emit orientationchange

// Emit resize

// Empty animations, or finishing resolves immediately

// Empty the queue first

// Enable finishing flag on private data

// End the loop early

// Enforce case-sensitivity of name attribute

// Enforce single-firing

// Ensure a hooks for this queue

// Ensure proper type for the source value

// Ensure that invalid selectors throw exceptions at attach time

// Ensure the complete handler is called before this completes

// Ensure the created nodes are orphaned (#12392)

// Ensure the presence of an event listener that handles manually-triggered

// Evaluate against documentElement in case elem is a non-element node (e.g., document)

// Evaluate and update our best guess (doubling guesses that zero out).

// Evaluate executable scripts on first document insertion

// Evaluate text as a json expression

// Evaluates a script in a provided context; falls back to the global one

// Event object

// Events

// Events bubbling up the document may have been marked as prevented

// Exclude object elements

// Exclude scripts to avoid IE 'Permission Denied' errors

// Execute a callback for every element in the matched set.

// Execute callbacks for all pending executions,

// Execute immediately if ready is not present

// Execute the appropriate callbacks

// Execute the module function

// Executing both pixelPosition & boxSizingReliable tests require only one layout

// Exit early if the nodes are identical

// Expand context for sibling selectors

// Export object

// Expose jQuery and $ identifiers, even in AMD

// Expose support vars for convenience

// Extend Swiper

// Extend defaults with modules params

// Extend defaults with passed params

// Extend instance methods and props

// Extend jQuery itself if only one argument is passed

// Extend params

// Extend the base object

// Extend with the prototype to reset the above stopImmediatePropagation()

// Extending ajaxSettings

// Extract dataTypes list

// Extract error from statusText and normalize for non-aborts

// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)

// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"

// Fade out instead of backspace

// Fails to persist the checked state of a cloned checkbox or radio button.

// Fake xhr

// Fall back on getElementsByName

// Fall back to offsetWidth/offsetHeight when value is "auto"

// Fall-back if spin cannot be determined

// Fallback to prop when attributes are not supported

// Fallback to seeking `elem` from the start

// Fetch a seed set for right-to-left matching

// File protocol always yields status code 0, assume 200

// File: protocol always yields status 0; see #8605, #14207

// Filter out possible comments

// Filters

// Find Wrapper

// Find actual thumbs index to slide to

// Find current slide

// Find current slide size

// Find delegate handlers

// Find el

// Find new height from highest slide in view

// Find primary matches

// Find slides currently in view

// Find the next relative operator (if any) for proper handling

// Finish early in limited (non-browser) environments

// Finish if the scale equals or crosses 1 (making the old*new product non-positive).

// Fire an inner synthetic event with the original arguments

// Fire callbacks

// Fire handlers on the event path

// Firefox doesn't alert if the returnValue field is not set.

// Firefox doesn't have focus(in | out) events

// Fix For Negative Oversliding

// Fix For Positive Oversliding

// Fix IE bugs, see support tests

// Fix IE cloning issues

// Fix duration

// Fix for ultra small values

// Fix name and attach hooks

// Fixes #9887

// Fixes bug #9237

// Flag for duplicate removal

// Flag the module as loaded

// Flag to know if list is currently firing

// Flag to know if list was already fired

// Flag to prevent firing

// Flatten any nested arrays

// For "border" or "margin", add border

// For "content" or "padding", subtract border

// For "content", subtract padding

// For CommonJS and CommonJS-like environments where a proper `window`

// For Promises/A+, convert exceptions into rejections

// For XHR2 non-text, let the caller handle it (gh-2498)

// For cross-browser consistency, suppress native .click() on links

// For cross-domain requests, seeing as conditions for a preflight are

// For each dataType in the dataTypeExpression

// For environments that do not have a `window` with a `document`

// For faster swipes, also apply limits (albeit higher ones).

// For internal use only.

// For mouseenter/leave call the handler if related is outside the target.

// For mutual compressibility with _default, replace `this` access with a local var.

// For options that shouldn't be deep extended:

// For same-domain requests, won't change header if already provided.

// For use in libraries implementing .is()

// For values outside the Basic Multilingual Plane (BMP), manually construct a

// Force browsers to behave consistently when non-matching value is set

// Force callback invocation

// Force json dataType

// Force options to be an object

// Force setup before trigger

// Force setup before triggering a click

// Forget the data if we're done with it

// Form elements to match

// Free mode

// Freemode or scrollContainer:

// Gecko does not error, returns false instead

// General show/hide setup for this element animation

// Generate a function of recursive functions that can be used to check each element

// Generate parameters to create a standard animation

// Generate shortcuts for custom animations

// Get a promise for this deferred

// Get a promise resolved when queues of a certain type

// Get and set the style property on a DOM Node

// Get attr

// Get breakpoint for window width

// Get breakpoint for window width and update parameters

// Get callback name, remembering preexisting value associated with it

// Get document width or height

// Get document-relative position by adding viewport scroll to viewport-relative gBCR

// Get excess from tokenize (recursively)

// Get initial elements from seed or context

// Get nonempty value(s) by temporarily forcing visibility

// Get real index

// Get response data

// Get the Nth element in the matched element set OR

// Get the final matcherOut by condensing this intermediate into postFinder contexts

// Get the index of the transform

// Get the indexes of x1 and x3 (the array indexes before and after given x2):

// Get the specific value for the option

// Get the whole matched element set as a clean array

// Get transport

// Get value

// Get width or height on the element, requesting but not forcing parseFloat

// Gets

// Gets all values

// Gets hook for the prefixed version, then unprefixed version

// Give the init function the jQuery prototype for later instantiation

// Given an x value (x2), return the expected y2 value:

// Go through every key on the object,

// Go through the array, only saving the items

// Go through the array, translating each of the items to their new values

// Go to the end state if fx are off

// Grab Cursor

// Grab necessary hook if one is defined

// Guard against undefined "subtract", e.g., when used as in cssHooks

// HANDLE: $(""), $(null), $(undefined), $(false)

// HANDLE: $(#id)

// HANDLE: $(DOMElement)

// HANDLE: $(expr, $(...))

// HANDLE: $(html) -> $(array)

// HANDLE: $(html, props)

// HTML5 custom data-* attrs

// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)

// Handle HTML strings

// Handle a deep copy situation

// Handle a returned thenable

// Handle cache's special case and crossDomain

// Handle case when target is a string or something (possible in deep copy)

// Handle event binding

// Handle falsy url in the settings object (#10093: consistency with old signature)

// Handle firing indexes

// Handle iff the expected data type is "jsonp" or we have a parameter to set

// Handle it asynchronously to allow scripts the opportunity to delay ready

// Handle most common string cases

// Handle multiple events separated by a space

// Handle state

// Handle the global AJAX counter

// Handle when the DOM is ready

// Handle: [ owner, key, value ] args

// Handle: [ owner, { properties } ] args

// Handle: regular nodes (via `this.ownerDocument`), window

// Has a wrapper and it exists

// Headers (they are sent all at once)

// Hook needed; redefine it so that the support test is not executed again.

// Hook not needed (or it's not possible to use it due

// Hooks for boolean attributes

// However, it is not slated for removal any time soon

// ID filter and find

// ID selector

// IE 11/Edge don't find elements on a `[name='']` query in some cases.

// IE 9's matchesSelector returns false on disconnected nodes

// IE <=9 replaces <option> tags with their contents when inserted outside of

// IE returns zIndex value as an integer.

// IE throws exception on accessing the href property if url is malformed,

// IE throws on elements created in popups

// IE throws on parseFromString with invalid input.

// IE's :disabled selector does not pick up the children of disabled fieldsets

// IE/Edge & older browsers don't support the :scope pseudo-class.

// IE/Edge misreport `getComputedStyle` of table rows with width/height

// IE/Edge sometimes throw a "Permission denied" error when strict-comparing

// IE8 throws error here and will not see later tests

// IE8-9 doesn't update selected after form reset (#2551)

// IE9 has no XHR2 but throws on binary (trac-11426)

// Identify a display type, preferring old show/hide data over the CSS cascade

// If "type" variable is undefined, then "GET" method will be used.

// If 1-4 are "yes" then we're near the end of a momuntum scroll deceleration.

// If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.

// If a hook was provided get the computed value from there

// If a hook was provided get the non-computed value from there

// If a hook was provided, use that value, otherwise just set the specified value

// If a normal DOM Ready event fired, decrement, and wait if need be

// If a number was passed in, add the unit (except for certain CSS properties)

// If a selector was specified, locate the right elements in a dummy div

// If an array was passed in, assume that it is an array of form elements.

// If conv2 outputs current

// If curCSS returns percentage, fallback to offset

// If data is available and should be processed, append data to url

// If event changes its type, use the special event handlers for the changed type

// If freeModeSticky is active and the user ends a swipe with a slow-velocity

// If it is a node unlikely to be stringify-ed or looped over

// If it receives a jQuery object, the first element is used

// If it's a function

// If it's time to release the scroll:

// If key is an array of keys...

// If no argument is given, return whether or not list has callbacks attached.

// If no nodeType, this is expected to be an array

// If no transport, we auto-abort

// If nobody prevented the default action, do it now

// If none found, seek a pair

// If not, create one

// If nothing was found internally, try to fetch any

// If obj is provided, the promise aspect is added to the object

// If option relativeToWrapper is true, use relative wrapper value instead.

// If paused, unpause and set listener for window resizing events

// If prev can be converted to accepted input

// If previous value didn't exist - remove it

// If request was aborted inside a prefilter, stop there

// If request was aborted inside ajaxSend, stop there

// If seed is empty or no tokens remain, we can return early

// If selector defined, determine special event api type, otherwise given type

// If set returns undefined, fall back to normal setting

// If so, use new position. If not, set position to limit.

// If successful, handle type chaining

// If target is omitted, writes into ajaxSettings.

// If the callback returns false

// If the element has a class name or if we're passed `false`,

// If the element has the percentage attribute, the posY and posX needs to be

// If the event is namespaced, then each handler is only invoked if it is

// If the fx queue is dequeued, always remove the progress sentinel

// If the movement is NOT big enough and

// If the nodes are siblings, we can do a quick check

// If the option relativeToWrapper is true, use the wrappers offset to top, subtracted from the current page scroll.

// If the preceding token was a descendant combinator, insert an implicit any-element `*`

// If the selector is sufficiently simple, try using a "get*By*" DOM method

// If there are functions bound, to execute

// If there is an error parsing the URL, assume it is crossDomain,

// If there is at least one previous recorded event:

// If there is some text in the element

// If there's more to do, yield

// If this is a native event triggered above, everything is now in order

// If this is a positional/relative selector, check membership in the returned set

// If this is an inner synthetic event for an event with a bubbling surrogate

// If this was an empty animation, synthesize a final progress notification

// If traditional, encode the "old" way (the way 1.3.2 or older

// If url is an object, simulate pre-1.5 signature

// If user is scrolling towards the end:

// If value is a function, invoke it and use its return value

// If we are going to the end, we want to run all the tweens

// If we found a dataType

// If we get here with a content-box, we're seeking "padding" or "border" or "margin"

// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,

// If we have elements to modify, make the request

// If we have memory from a past run, we should fire after adding

// If we include width, step value is 1 to do all cssExpand values,

// If we recently snapped after a momentum scroll, then ignore wheel events

// If you got here is because an animation has been triggered so store the current time

// Ignore double-resolution attempts

// Ignore post-resolution exceptions

// Ignore repeat invocations

// Images

// Implement show/hide animations

// Implement the identical functionality for filter and not

// In CSS3, :checked should return both checked and selected elements

// In IE/Edge using regex groups here causes severe slowdowns.

// In Safari 8 documents created via document.implementation.createHTMLDocument

// In cases where either:

// In some browsers, typeof returns "function" for HTML <object> elements

// In such cases, we work around the behavior by prefixing every selector in the

// In those cases, the computed value can be trusted to be border-box.

// In-page `selector#id sibling-combinator selector` fails

// Includes all common event props including KeyEvent and MouseEvent specific props

// Incorporate borders into its offset, since they are outside its content origin

// Incorporate the offset, then check against cycle size

// Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.

// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that

// Index in selector

// Index of currently firing callback (modified by add/remove as needed)

// Indexes

// Init

// Init Flag

// Init the element's event structure and main handler, if this is the first

// Init the event handler queue if we're the first

// Initialize a jQuery object

// Initialize against the default document

// Initialize central reference

// Initialize it up

// Inject the element directly into the jQuery object

// Inline style trumps all

// Insert callback into url or form data

// Inspect recursively

// Install Modules

// Install callback

// Install callbacks on deferreds

// Install script dataType

// Instance methods

// Instance-specific data

// Intentionally let the error be thrown if parseHTML is not present

// Interestingly, IE 10 & older don't seem to have the issue.

// Interestingly, in some cases IE 9 doesn't suffer from this issue.

// Interrupt processing of the outer synthetic .trigger()ed event

// Is the DOM ready to be used? Set to true once it occurs.

// Is the cursor blinking

// It's easy to see this when simulating touch with mouse events. To fix this,

// Item is non-scalar (array or object), encode its numeric index.

// Iterate over the collection passing elements to `callback`

// Iterate over the current collection

// Iteratively approximate from a nonzero starting point

// Jump to end and forget the data so .add doesn't re-fire

// Keep an empty list if we have data for future add calls

// Keep pipe for back-compat

// Keep references to cloned scripts for later restoration

// Keep the most recent events

// Keep track of which events have ever been used, for event optimization

// Keys separate source (or catchall "*") and destination types with a single space

// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable

// Last click time

// Last fire value for non-forgettable lists

// Last-Modified header cache for next request

// Latest Chrome and webkits Fix

// Lazy-add the new callbacks in a way that preserves old ones

// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter

// Legacy

// Lengthen the array for every element, matched or not

// Leverage slice if possible

// Listen to events

// Live events

// Load entry module and return exports

// Local document vars

// Locks

// Long touches

// Look for any active animations, and finish them

// Look for any animations in the old queue and finish them

// Loop through all the selected options

// Loop variable

// Looping logic

// MIT license

// Main method

// Make a writable jQuery.Event from the native event object

// Make numeric if forced or a qualifier was provided and val looks numeric

// Make sure textarea (and checkbox) defaultValue is properly cloned

// Make sure that null and NaN values aren't set (#7116)

// Make sure that re-using the options doesn't screw things around

// Make sure that the handler has a unique ID, used to find/remove it later

// Make sure that we're working with the right name

// Make sure that we're working with the right name. We don't

// Make sure the element is visible & connected

// Make sure we set the data so it isn't changed later

// Make sure we trim BOM and NBSP

// Make sure we update the tween properties later on

// Make the changes, replacing each non-ignored context element with the new content

// Make the deferred a promise

// Make this explicit, since user can override this through ajaxSetup (#11264)

// Make value of this field explicit since

// Map over jQuery in case of overwrite

// Map over the $ in case of overwrite

// Map tuples (progress, done, fail) to arguments (done, fail, progress)

// Margin is only for outerHeight, outerWidth

// Mark it as fixed

// Mark scripts as having already been evaluated

// Match elements found at the specified indexes

// Match elements unmatched by `matcher`

// Match html or make sure no context is specified for #id

// Matches dashed string for camelizing

// Method init() accepts an alternate rootjQuery

// Methods guaranteed to produce a unique set when starting from a unique set

// Microsoft forgot to hump their vendor prefix (#9572)

// Miscellaneous

// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add

// Module create callback

// More options handling for requests with no content

// Move image

// Move matched elements from seed to results to keep them synchronized

// Move that element

// Move the given value to match[3] whether quoted or unquoted

// Multi-Selects return an array

// Multifunctional method to get and set values of a collection

// Multiple arguments are aggregated like Promise.all array elements

// Must access selectedIndex to make default options select

// NB: No relatedTarget if the mouse left/entered the browser window

// NEW

// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`

// NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).

// NS

// Namespaced trigger; create a regexp to match event type in handle()

// Native handler

// Navigation

// Need init if jQuery is called (just allow error to be thrown if not included)

// Need to be able to calculate position if either

// Never move original objects, clone them

// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"

// Next Slide

// Next Slides

// No argument, return index in parent

// No support

// Node/element

// Normalize "" and auto

// Normalize opt.queue - true/undefined/null -> "fx"

// Normalize slideIndex

// Not public - generate a queueHooks object, or return the current one

// Not quite $.extend, this won't overwrite existing keys.

// Nothing should be selected when empty strings follow ^= or $= or *=

// Now query selector

// Nullify the div so it wouldn't be stored in the memory and

// Object

// Objects with no prototype (e.g., `Object.create( null )`) are plain

// Objects with prototype are plain iff they were constructed by a global Object function

// Observe container

// Observe wrapper

// Old Firefox doesn't throw on a badly-escaped identifier.

// Older IE sometimes signals "interactive" too soon

// Older WebKit doesn't clone checked state correctly in fragments

// On a manual native abort, IE9 throws

// On the other hand, just using `getAttribute` is not enough as

// Once for each type.namespace in types; type may be omitted

// One-time assignments

// Only add window if we got to document (e.g., not plain obj or detached DOM)

// Only assign if different to avoid unneeded rendering.

// Only attach events to objects that accept data

// Only certain elements can match :enabled or :disabled

// Only check objects and functions for thenability

// Only convert to a number if it doesn't change the string

// Only deal with non-null/undefined values

// Only evaluate the response if it is successful (gh-4126)

// Only keep the most recent entries

// Only normal processors (resolve) catch and reject exceptions

// Only read styles.position if the test has a chance to fail

// Only substitute handlers pass on context

// Only use addEventListener if the special events handler returns false

// Opera 10-11 does not throw on post-comma invalid pseudos

// Operate on a copy of prop so per-property easing won't be lost

// Operator (capture 2)

// Optimize for push.apply( _, NodeList )

// Option elements defer to a parent optgroup if present

// Option to run scripts is true for back-compat

// Optional AJAX dependency, but won't run scripts if not present

// Optional individual block speed as data attr, otherwise global speed

// Or just use first one

// Other potentially-special ASCII characters get backslash-escaped

// Other selectors

// Otherwise append directly

// Otherwise bring back whatever was previously saved (if anything),

// Otherwise just get the value from the style object

// Otherwise nodes in our document sort first

// Otherwise use the full result

// Otherwise we know they are disconnected

// Otherwise we need full lists of their ancestors for comparison

// Otherwise, check computed style

// Otherwise, if a way to get the computed value exists, use that

// Otherwise, throw an error or return tokens

// Override manipulation of globals by nested matchers

// Override mime type if needed

// Overrides response content-type header

// Pagination

// Panic based approach to setting things on disconnected nodes

// Parentless nodes are either documents or disconnected

// Parse text as xml

// Pass this if window is not defined yet

// Passing an empty string as a 3rd parameter to .css will automatically

// Passive Listeners

// Per-property setup

// Piggyback on a donor event to simulate a different one

// Pixel Ratio

// Populate the class2type map

// Position-in-collection

// Positional selectors never match, since there's no _selection_ context

// Potentially complex pseudos

// Precompiled matchers will still verify ancestry, so step up a level

// Prefer a tbody over its parent table for containing new rows

// Prefilter to get matcher input, preserving a map for seed-results synchronization

// Prefix every selector in the list

// Prepend if requested

// Preserve chaining for setter

// Preserve script evaluation history

// Pretend to be hidden if this is a "show" and

// Prev Slide

// Prev Slides

// Prevent Links Clicks

// Prevent Object.prototype pollution

// Prevent attribute/property "interpolation"

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

// Prevent memory leaks

// Prevent never-ending loop

// Prevent re-triggering of the same event, since we already bubbled it above

// Prevent triggered image.load events from bubbling to window.load

// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)

// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters

// Process the value(s)

// Progress

// Propagate others as results

// Properties of context are called as methods if possible

// Props

// Prototype

// Provide `match` to avoid retokenization if we modified the selector above

// Provide the current computed size to request scroll gutter calculation (gh-3589)

// Purposefully self-exclusive

// Put explicitly provided properties onto the event object

// Put hash and anti-cache on the URL that will be requested (gh-1732)

// Put in the new values to get a computed value out

// QSA and matchesSelector support

// Queue of execution data for repeatable lists

// Queue-skipping animations hijack the fx hooks

// Queueing

// Quick check to determine if target is callable, in the spec

// RTL

// Radios and checkboxes getter/setter

// Raw string

// Re-resolve promises immediately to dodge false rejection from

// Record all 3 overflow attributes because IE does not infer the shorthand

// Recurse if we're merging plain objects or arrays

// Reduce context if the leading compound selector is an ID

// Reenable scripts

// Regex strategy adopted from Diego Perini

// Register the controller as a special universal handler for all event namespaces

// Register the new event in a variable which stores the relevant data

// Regular expressions

// Reintegrate element matches to eliminate the need for sorting

// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787

// Rellax.js

// Remaining elements are neither :enabled nor :disabled

// Remember that setFilters inherits from pseudos

// Remember that the DOM is ready

// Remember the hash so we can put it back

// Remember the old values, and insert the new ones

// Remember the original values

// Remember the top-level container

// Remember what we're overwriting

// Remove "transform" string and save the attribute

// Remove *all* instances

// Remove a callback from the list

// Remove all callbacks from the list

// Remove any remaining nodes

// Remove auto dataType and get content-type in the process

// Remove boolean attributes when set to false

// Remove data and the expando if it's no longer used

// Remove duplicated slides

// Remove duplicates

// Remove element nodes and prevent memory leaks

// Remove from its parent by default

// Remove generic event handler if we removed something and no more handlers exist

// Remove hash to simplify url manipulation

// Remove last grid elements depending on width

// Remove matching events

// Remove resize event listener if not pause, and pause

// Remove the expando if there's no more data

// Remove wrapper from fragment

// Removing the function wrapper causes a "Permission Denied"

// Render Container

// Render || Update Pagination bullets/items

// Replace a hexadecimal escape sequence with the encoded Unicode code point

// Replace/restore the type attribute of script elements for safe DOM manipulation

// Request state (becomes false upon send and true upon completion)

// Resets current string if end of loop reached

// Resistance

// Resize handler

// Resolve the animation and report its conclusion

// Resolve when we played the last frame; otherwise, reject

// Response headers

// Restore matcherIn since elem is not yet a final match

// Restore the original display value at the end of pure show/hide animations

// Restrict "overflow" and "display" styles during box animations

// Rethrow post-completion exceptions

// Retrieve `then` only once

// Retrieving style before computed somehow

// Return Grab Cursor

// Return `this` to allow chained DOM operations

// Return a confounding non-pixel value or feign ignorance, as appropriate.

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property

// Return a vendor-prefixed property or undefined

// Return all the elements in a clean array

// Return app instance

// Return collection with methods

// Return early from calls with invalid selector or context

// Return early if doc is invalid or already selected

// Return false to allow normal processing in the caller

// Return jQuery for attributes-only inclusion

// Return just the one element from the set

// Return locks after resize

// Return non-false to allow normal event-path propagation

// Return page scroll on edge positions

// Return special upon seeing a positional matcher

// Return the cloned set

// Return the exports of the module

// Return the length of the invalid excess

// Return the modified object

// Return the newly-formed element set

// Return the resulting serialization

// Return true to animate scroll on edges

// Return zeros for disconnected and hidden (display: none) elements (gh-2310)

// Reuse newcache so results back-propagate to previous elements

// Reusing 'index' because we have the correct "name"

// Reverse direction for :only-* (if we haven't yet done so)

// Reverse order for parents* and prev-derivatives

// Revert the changed values

// Revert the old values

// Round length

// Run callback and check for early termination

// Run delegates first; they may want to stop propagation beneath us

// Run the timer and safely remove it when done (allowing for external removal)

// Running getBoundingClientRect on a

// Running getBoundingClientRect on a disconnected node

// Safari 4 - 5 only, Opera <=11.6 - 12.x only

// Safari 6.0 supports :scope but it's an alias of :root there.

// Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

// Safari sends mouseenter too often; see:

// Save Dom lib

// Save back as free

// Save locks

// Save response for use in complete callback

// Save selector and tokenization

// Save the URL in case we're toying with the If-Modified-Since

// Save the callback name for future use

// Saved data should be false in such cases, but might be a leftover capture object

// Scale image

// See comment above for "remaining wheel events in this scroll" determination.

// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display

// See https://bugs.jquery.com/ticket/13378

// See https://connect.microsoft.com/IE/feedback/details/1736512/

// See https://github.com/jquery/sizzle/pull/225

// See https://github.com/whatwg/html/issues/2369

// See https://html.spec.whatwg.org/#nonce-attributes

// See if we can take a shortcut and just use innerHTML

// See setDocument()

// See ticket #14549 for more info.

// Seedless set matches succeeding multiple successful matchers stipulate sorting

// Seek `elem` from a previously-cached index

// Seek a direct converter

// Select is set to empty string on purpose

// Send global event

// Serialize an array of form elements or a set of

// Serialize array item.

// Serialize object item.

// Serialize scalar item.

// Serialize the form elements

// Set Grab Cursor

// Set attrs

// Set breakpoint

// Set correct perspective for IE10

// Set data for the fake xhr object

// Set document vars if needed

// Set headers

// Set position first, in-case top/left are set even on static elem

// Set readyState

// Set shadows

// Set slides order

// Set the Accepts header for the server, depending on the dataType

// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.

// Set the base href for the created document

// Set the correct header, if data is being sent

// Set the data...

// Set the display of the elements in a second loop to avoid constant reflow

// Set the guid of unique handler to the same of original handler, so it can be removed

// Set the order in which the strings are typed

// Set value

// Set width or height on the element

// Set wrapper width

// Sets many values

// Sets multiple values

// Sets one value

// Shift arguments if data argument was omitted

// Short swipes

// Shortcut for :nth-*(n)

// Shortcut simple #id case for speed

// Should return 1, but returns 4 (following)

// Show any hidden elements after setting opacity to 0

// Show elements before animating them

// Simple values such as "10px" are parsed to Float;

// Simulated bind

// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in

// Since we force visibility upon cascade-hidden elements, an immediate (and slow)

// Single element

// Single tag

// Single- and empty arguments are adopted like Promise.resolve

// Skip elements already in the context collection (trac-4087)

// Skip the boolean and the target

// Slide To Initial Slide

// Slides

// Slides grid

// Snap immediately and ignore remaining wheel events in this scroll.

// So expect focus to be synchronous when the element is already active,

// So, we allow :focus to pass through QSA all the time to avoid the IE error

// Some browsers don't support the "nonce" property on scripts.

// Some old versions of Webkit choke when 'none' is passed; pass

// Some styles come back with percentage values, even though they shouldn't

// Sort on method existence if only one input has compareDocumentPosition

// Sort stability

// Special processors (notify) just wait for resolution

// Speed up dequeue by getting out quickly if this is just a lookup

// Start the loop

// Start the next in the queue if the last step wasn't forced.

// Start typing

// Start with computed style

// Starting value computation is required for potential unit mismatches

// Status-dependent callbacks

// Stop autoplay

// Stop scripts or inline event handlers from being executed immediately

// Store arguments for use when handling the inner native event

// Store className if set

// Store hidden/visible for toggle so `.stop().toggle()` "reverses"

// Strict HTML recognition (#11290: must start with <)

// Strict mode functions invoked without .call/.apply get global-object context

// String

// Strip and collapse whitespace

// Strip and collapse whitespace according to HTML spec

// Style of cloned element affects source element cloned (#8908)

// Subtract paddings

// Subtract parent offsets and element margins

// Subtracting initialize value, so element stays in same spot as HTML

// Success/Error

// Support array or space separated string of keys

// Support: Android 4.0 - 4.3 only

// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3

// Support: Android 4.0 only

// Support: Android <=2.3 only

// Support: Android <=2.3 only (functionish RegExp)

// Support: Android <=4.0 only

// Support: Android <=4.0 only, PhantomJS 1 only

// Support: Android <=4.1 - 4.3 only

// Support: Android <=4.1 only

// Support: Android <=4.3 only

// Support: Android<4.0

// Support: Chrome 14-35+

// Support: Chrome <=35 - 45

// Support: Chrome <=35 - 45+

// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1

// Support: Chrome <=57, Firefox <=52

// Support: Chrome <=64

// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+

// Support: Firefox 20+

// Support: Firefox 51+

// Support: Firefox 64+, Edge 18+

// Support: Firefox <=3.6 - 5 only

// Support: Firefox <=42

// Support: Firefox <=43 - 45

// Support: Firefox <=44

// Support: Firefox <=54

// Support: IE 10 - 11+, Edge 15 - 18+

// Support: IE 11 only

// Support: IE 11+

// Support: IE 11+, Edge 15 - 18+

// Support: IE 11+, Edge 17 - 18+

// Support: IE 11, Edge

// Support: IE 6 - 7 only

// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,

// Support: IE 8 - 9 only

// Support: IE 8 only

// Support: IE 9 - 11 only

// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only

// Support: IE 9 - 11+, Edge 12 - 18+

// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only

// Support: IE 9 - 11+, Edge 15 - 18+

// Support: IE 9 only

// Support: IE <9 only

// Support: IE <=10 - 11 only

// Support: IE <=10 - 11, Edge 12 - 13 only

// Support: IE <=11 only

// Support: IE <=11 only, Firefox <=30 (#15098, #14150)

// Support: IE <=11+

// Support: IE <=8

// Support: IE <=8 - 11 only

// Support: IE <=8 - 11, Edge 12 - 15

// Support: IE <=9

// Support: IE <=9 - 10 only

// Support: IE <=9 - 11 only

// Support: IE <=9 - 11+

// Support: IE <=9 - 11, Edge 12 - 15

// Support: IE <=9 only

// Support: IE, Opera, Webkit

// Support: IE8

// Support: IE8, Opera 11-12.16

// Support: IE9-11+

// Support: IE<10

// Support: IE<8

// Support: IE<9

// Support: IE<9, Safari

// Support: Opera 10 - 11 only

// Support: Promises/A+ section 2.3.1

// Support: Promises/A+ section 2.3.3.3.1

// Support: Promises/A+ section 2.3.3.3.3

// Support: Promises/A+ section 2.3.3.3.4.1

// Support: Promises/A+ section 2.3.4

// Support: Promises/A+ sections 2.3.3.1, 3.5

// Support: Safari 6.0 only

// Support: Safari 7 only

// Support: Safari 8 only

// Support: Safari 8+

// Support: Safari 8+, iOS 8+

// Support: Safari <=6 - 7 only

// Support: Safari <=7 - 9.1, Chrome <=37 - 49

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)

// Support: Windows 8 Native Apps

// Support: Windows Web Apps (WWA)

// Support: iOS 10.0-10.2 only

// Support: real iOS 8.2 only (not reproducible in simulator)

// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)

// Swappable if display is none or starts with table

// Swiper Class

// Swiper Instance

// Swiping/no swiping

// TODO: Now that all calls to _data and _removeData have been replaced

// TODO: identify versions

// Table columns in Safari have non-zero offsetWidth & zero

// Tag

// Take advantage of querySelectorAll

// Take an array of elements and push it onto the stack

// Take the "read" path and allow the get method to determine

// Tap, doubleTap, Click

// Target should not be a text node (#504, #13143)

// Text to html (true = no transformation)

// Thanks to Andrew Dupont for this technique.

// Thanks to Paraxify.js and Jaime Cabllero

// The `node.getAttribute` check was added for the sake of

// The attrs elements can be null (#14894)

// The broken getElementById methods don't pick up programmatically-set names,

// The calling jQuery object (element matches) is not empty

// The current translate is before the current snap index, so the choice

// The current translate is on or after the current snap index, so the choice

// The current version of jQuery being used

// The default length of a jQuery object is 0

// The deferred used on DOM ready

// The elements to wrap the target around

// The final step of a "hide" animation is actually hiding the element

// The foundational matcher ensures that elements are reachable from top-level context(s)

// The getter ensures a default option is selected

// The identifier C does not have to be a valid language name."

// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append

// The jQuery object is actually just the init constructor 'enhanced'

// The key will always be camelCased in Data

// The matching of C against the element's language value is performed case-insensitively.

// The module cache

// The next two "if" blocks go like this:

// The observerUpdate event should only be triggered

// The ready event handler and self cleanup method

// The require function

// The technique has to be used as well when a leading combinator is used

// The test attribute must be unknown in Opera but "safe" for WinRT

// The type and name attributes are restricted during .innerHTML assignment

// The url can be an options object (which then must have .url)

// The user may use createPseudo to indicate that

// The value/s can optionally be executed if it's a function

// Then, check if the new position is inside the allowed limit

// There *must* be a type, no attaching namespace-only handlers

// There will always be at least one argument (an event object), so this array

// There would be no events with distance zero, so the last event is stale.

// There's only work to do if current dataType is non-auto

// These hooks are used by animate to expand properties

// These usually indicate a programmer mistake during development,

// They will have gone through all possible matchers

// This "if" is needed for plain objects

// This accentuates the need for the creation of a real `window`.

// This corresponds to the behavior of CSS absolute positioning

// This expression is here for better compressibility (see addClass)

// This happens for inline elements with no explicit setting (gh-3571)

// This is a singleton, we need to execute it only once

// This is against the CSSOM draft spec:

// This is the only way to test support for the `wheel` event in IE9+.

// This is to test IE's treatment of not explicitly

// This logic, however, is not guaranteed and can change at any point in the future

// This method will return documentElement in the following cases:

// This should fail with an exception

// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the

// This transport only deals with cross domain or forced-by-attrs requests

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// Threshold

// Time diff

// Timeout

// Timers currently will call their complete callbacks, which

// To know if global events are to be dispatched

// To know if the callbacks have already been called at least once

// To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).

// Toggle Zoom

// Toggle individual class names

// Toggle whole class name

// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id

// Touch Events

// Touches

// Track unmatched elements for set filters

// Transforms

// Traverse its children

// Treat each array item as a scalar.

// Treat null/undefined as ""; convert numbers to string

// Treat the template element as a regular one in browsers that

// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

// Trigger the native event and capture its result

// Trim the selector passed to compile

// Trim the style to the transform point and get the following semi-colon index

// Trust units reported by jQuery.css

// Try convertible dataTypes

// Try prefixed name followed by the unprefixed name

// Try to minimize operations if there is only one selector in the list and no seed

// Try to shortcut find operations (as opposed to filters) in HTML documents

// Turn off finishing flag

// Type selector

// Types

// Types can be a map of types/handlers

// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER

// URL without anti-cache param

// Un-match failing elements by moving them back to matcherIn

// Unbind all events (on this namespace, if provided) for the element

// Unique Navigation Elements

// Unique for each copy of jQuery on the page

// Unless errors are allowed to bubble, catch and return them

// Unless we *know* we can detect duplicates, assume their presence

// Update Height

// Update Index

// Update Navigation Buttons

// Update active index in free mode

// Update global variables

// Update progress

// Update size

// Update slides

// Update special based on newly reset type

// Update translate

// Uppercase the type

// Url cleanup var

// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)

// Use .is( ":disabled" ) so that fieldset[disabled] works

// Use .style if available and use plain properties where available.

// Use IE sourceIndex if available on both nodes

// Use a noop converter for missing script

// Use a property on the element directly when it is not a DOM element,

// Use a stripped-down indexOf as it's faster than native

// Use cssHook if its there.

// Use data converter to retrieve json after script execution

// Use defaultValue in place of getAttribute("value")

// Use getAttributeNode to fetch booleans when getAttribute lies

// Use integer dirruns iff this is the outermost matcher

// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)

// Use native DOM manipulation to avoid our domManip AJAX trickery

// Use offsetWidth/offsetHeight for when box sizing is unreliable.

// Use onreadystatechange to replace onabort

// Use previously-cached element index if available

// Use proper attribute retrieval(#12072)

// Use same guid so caller can remove using origFn

// Use step hook for back compat.

// Use textContent for elements

// Use the fix-ed jQuery.Event rather than the (read-only) native event

// Use the handy event callback

// Use the original fragment for the last item

// Use the same loop as above to seek `elem` from the start

// Use toString instead of jQuery.type to catch host objects

// Use typeof to avoid zero-argument method invocation on host objects (#15151)

// Used by camelCase as callback to replace()

// Used for iframes

// Used only for `focus(in | out)` events

// User defined options (might have more in the future)

// Utilize native event if possible so blur/focus sequence is correct

// Utilize native event to ensure correct state for checkable inputs

// Velocities

// Velocity

// Verify that getAttribute really returns attributes and not properties

// Verify the id attribute

// Vertical

// Virtual Translate

// Visible Slides

// Walk down the tree looking for a discrepancy

// Watch for a new set of requests

// We add the dataType to the list if needed

// We allow this because of a bug in IE8/9 that throws an error

// We also use the url parameter if available

// We always set camelCase keys, so remove that.

// We always store the camelCased key

// We assume that it's the callback

// We can accept data for non-element nodes in modern browsers,

// We can fire global events as of now if asked to

// We can use :scope instead of the ID hack if the browser

// We can't cloneNode fragments that contain checked, in WebKit

// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

// We don't need an array for one selects

// We don't want to classify *any* DOM node as a function.

// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2

// We have to close these tags to support XHTML (#13200)

// We must always have either seed elements or outermost context

// We return undefined, instead of nothing here, so it's

// We should always get a number back from opacity

// We tried really hard, but the data doesn't exist.

// We use this for POS matching in `select`

// We're at the end of the deceleration of a momentum scroll, so there's no need

// We're done with this property

// We're done with this sentence!

// Webkit & Blink performance suffers when deleting properties

// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084

// Webkit/Opera - :checked should return selected option elements

// Webview

// When found, cache indexes on `parent` and break

// When looping, begin at the beginning after backspace complete

// When the key is not a string, or both a key and value

// When the typing is complete (when not looped)

// When wheel scrolling starts with sticky (aka snap) enabled, then detect

// Where available, offsetWidth/offsetHeight approximate border box dimensions.

// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the

// Where there is no isDisabled, check manually

// Work with a copy of dataTypes in case we need to modify it for conversion

// X-Requested-With header

// XHTML parsers do not magically insert elements in the

// Zoom In

// Zoom Out

// __webpack_public_path__

// _dp = detatched parent

// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {

// _propagateYoyoEase = (timeline, isYoyo) => {

// _ts is the functional timeScale which would be 0 if the animation is paused.

// _weightedEase = ratio => {

// _weightedEaseStrong = ratio => {

// `contentDocument` with a `null` prototype.

// `i` is now the count of elements visited above, and adding it to `matchedCount`

// `in` check used to prevent JIT error (gh-2145)

// `jQuery.globalEval` so that it can fake a nonce-containing node

// `name` and `type` must use .setAttribute for WWA (#14901)

// `value` parameter was not undefined. An empty jQuery object

// `|| data` is dead code meant only to preserve the variable through minification.

// a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.

// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.

// action, add listener, callbacks,

// add a delay before typing starts

// advance to the next closing parenthesis

// after the browser event has already occurred.

// akin to a jigsaw puzzle, we simply never set it to be sure.

// already occurred before other listeners are invoked.

// alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = ~~(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;

// amount of time to wait before backspacing

// an end-of-momentum snap).

// an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.

// and CommonJS for browser emulators (#13566)

// and blur to be synchronous when the element is not already active.

// and might be considered as more preferable results.

// and multiple values (non-spec behavior)

// and return the corresponding response

// and when you create one that shouldn't be

// and/or If-None-Match header later on

// are based on the document's URL (gh-2965)

// are emptied (fx is the type by default)

// are specified, set or extend (existing objects) with either:

// arg is for internal usage only

// arguments are needed to create the filter function

// arguments.

// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common

// around the issue.

// array position to next string

// as such selectors are not recognized by querySelectorAll.

// as xhr.onerror cannot be accessed

// attempt a parseFloat and fallback to a string if the parse fails.

// attribute to type into

// automatically dequeued

// background-* props affect original clone's values

// backspacing speed

// becomes browsing-context connected.

// behavior of getting and setting a style property

// being emptied incorrectly in certain situations (#8070).

// being equal to the identifier C,

// bubbling surrogate propagates *after* the non-bubbling base), but that seems

// but it did not work out

// but it must have a current display style that would benefit

// but that will not handle a native abort

// but those exceptions were never presented as a real life use-cases

// but we should not, see #8335.

// but width seems to be reliably pixels.

// by a handler lower down the tree; reflect the correct value.

// by using document.implementation

// call before functions if applicable

// callback that occurs on the last typed string

// camelCase, specialEasing and expand cssHook pass

// case, which will result in a "00" `matchedCount` that differs from `i` but is also

// character number position of current string

// check for an escape character before a pause value

// check for skip characters formatted as

// check if el is a className or a node

// check is required in this first loop unless we have a nonempty display value (either

// check what cancelAnimation method to use

// check which transform property to use

// checked="checked" or checked

// chosen element to manipulate text

// collapse sibling forms: the second one becomes a child of the first one.

// complex values such as "rotate(1rad)" are returned as-is.

// contain typing function in a timeout humanize'd delay

// context (optional): If specified, the fragment will be created in this context,

// correct value when it hasn't been explicitly set

// count of uncompleted subordinates

// count of unprocessed arguments

// curString: arg, this.el.html: original text inside element

// current array position

// custom cursor

// data from the HTML5 data-* attribute

// dataFilter is not invoked for failure responses, so using it instead

// dataPriv.set( el, "click", ... )

// dataPriv.set( this, "blur", ... )

// dataPriv.set( this, "focus", ... )

// dataTypeExpression is optional and defaults to "*"

// deep extended (see ajaxExtend)

// defaults to document

// deferred.done(function() { bind to newDefer or newDefer.resolve })

// deferred.fail(function() { bind to newDefer or newDefer.reject })

// deferred.notify = function() { deferred.notifyWith(...) }

// deferred.notifyWith = list.fireWith

// deferred.progress(function() { bind to newDefer or newDefer.notify })

// deferred.reject = function() { deferred.rejectWith(...) }

// deferred.rejectWith = list.fireWith

// deferred.resolve = function() { deferred.resolveWith(...) }

// deferred.resolveWith = list.fireWith

// delta in LINE units

// delta in PAGE units

// descendant combinators, which is not what we want.

// did it), otherwise encode params recursively.

// direction of the ongoing scroll because it's better UX for the scroll to snap

// disconnected node in IE throws an error

// div containing strings

// don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

// don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

// don't support it.

// e.g. http://example.com:80x/

// e.g. var jQuery = require("jquery")(window);

// easier to handle this case. if(!global) { ...}

// elem.tabIndex doesn't always return the

// empty string instead in this case

// end of character pause

// enough that all such attempts are guarded in a try block.

// ensures elements are positioned based on HTML layout.

// equals `i`), unless we didn't visit _any_ elements in the above loop because we have

// error in IE

// errors on any property access that is not readyState

// eslint rule "no-unused-expressions" is disabled for this code

// eslint-disable-line

// eslint-disable-next-line

// eslint-disable-next-line eqeqeq

// eslint-disable-next-line no-unused-expressions

// event, then durations can be 20+ seconds to slide one (or zero!) slides.

// events

// except "table", "table-cell", or "table-caption"

// excess is a negative index

// expose the module cache

// expose the modules object (__webpack_modules__)

// faking a content-box to get border and padding (gh-3699)

// falling back to the empty string if nothing was stored.

// feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.

// fires callback function

// fixes an issue with getting wrong values

// focus() and blur() are asynchronous

// focus() and blur() are asynchronous, except when they are no-op.

// focus(in | out) events fire after focus & blur events,

// focus/blur morphs to focusin/out; ensure we're not firing them right now

// for 500ms.

// for parallax concepts

// for the description of the bug (it existed in older Chrome versions as well).

// force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

// forces the browser to respect setting selected

// format: \^\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^

// fragment in IE 9

// from DOM nodes, so set to undefined instead

// from an async native handler (gh-4350)

// from identically-valued overflowX and overflowY and Edge just mirrors

// fulfilled_callbacks.disable

// fulfilled_handlers.add( ... )

// fulfilled_handlers.disable

// fulfilled_handlers.fire

// g can still be undefined, but nothing to do about it...

// getBoundingClientRect().width unless display is changed.

// getComputedStyle returns percent when specified for top/left/bottom/right;

// getElementById can match elements by name instead of ID

// getElementById is not reliable as a find shortcut

// getPropertyValue is needed for:

// getter, passed target, property, and unit (from _get())

// globalTime(rawTime) {

// handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

// handleObj is passed to all event handlers

// hasOwn isn't used here due to false negatives

// helper to determine current breakpoint

// html or plain text

// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked

// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters

// http://www.w3.org/TR/css3-selectors/#whitespace

// http://www.w3.org/TR/selectors/#empty-pseudo

// http://www.w3.org/TR/selectors/#lang-pseudo

// http://www.w3.org/TR/selectors/#pseudo-classes

// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)

// https://bugs.chromium.org/p/chromium/issues/detail?id=470258

// https://bugs.jquery.com/ticket/12359

// https://bugs.jquery.com/ticket/13393

// https://bugs.jquery.com/ticket/4833

// https://bugs.webkit.org/show_bug.cgi?id=136851

// https://bugs.webkit.org/show_bug.cgi?id=137337

// https://drafts.csswg.org/cssom/#common-serializing-idioms

// https://drafts.csswg.org/cssom/#resolved-values

// https://html.spec.whatwg.org/#strip-and-collapse-whitespace

// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled

// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

// https://jsperf.com/thor-indexof-vs-for/5

// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

// https://promisesaplus.com/#point-48

// https://promisesaplus.com/#point-54

// https://promisesaplus.com/#point-57

// https://promisesaplus.com/#point-59

// https://promisesaplus.com/#point-61

// https://promisesaplus.com/#point-64

// https://promisesaplus.com/#point-75

// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/

// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html

// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click

// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram

// humanized value for typing

// i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid

// iOS

// iOS 8+ changed UA

// iPadOs 13 fix

// if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

// if (!parent._dp && parent._time === parent._dur) { // if a root timeline completes...and then a while later one of its children resumes, we must shoot the playhead forward to where it should be raw-wise, otherwise the child will jump to the end. Down side: this assumes it's using the _ticker.time as a reference.

// if in paused state, don't toggle blinking a 2nd time

// if it's already scrolled more than 20% in the current direction, keep going.

// if no content

// if not specified.

// if smartBack is enabled

// if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.

// if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):

// if the number (id of character in current string) is

// if the pause occurs during the delay phase, make sure that's factored in when resuming.

// if the slider hasn't hit the first slide or

// if the slider is a loop and

// if the slider isn't moving right now:

// if the stop number has been reached, increase

// if user scrolls with shift he wants horizontal scroll

// if we get here, then we haven't detected the end of a momentum scroll, so

// if we're just parsing

// if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

// image already loaded...

// in IE throws an error.

// in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

// in px

// in that case, element will be second argument

// in the document.

// in the same direction as the scroll instead of reversing to snap.  Therefore,

// index of string to stop backspacing on

// inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.

// initializing at scrollY = 0 (top of browser), scrollX = 0 (left of browser)

// inline or about-to-be-restored)

// innerText usage removed for consistency of new lines (jQuery #11153)

// input strings of text

// instead of the first because it can end up

// is a plugin

// is based solely on the element's language value

// is between the current index and the one after it.

// is between the current index and the one before it.

// is present, execute the factory and get jQuery.

// is this the final string

// isDirection

// isHiddenWithinTree might be called from jQuery#filter function;

// isMoved = true;

// it can be rejected by the transport if it is invalid

// it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

// it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

// it makes sense to create this only once and recall it for the interpolation

// it will also be a sign that checks already performed

// jQuery handler

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding

// jQuery.proxy is deprecated to promote standards (specifically Function#bind)

// jQuery.support is not used in Core but other projects attach their

// jquery fix

// just as Sizzle does

// keepScripts (optional): If true, will include scripts passed in the html string

// key/values into a query string

// lang value must be a valid identifier

// leading to errors. We need to check for `getRootNode`.

// less bad than duplication.

// less than the stop number, keep going

// lifting finger or mouse vs. moving slowly before lifting the finger/mouse.

// like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

// limit single-slide swipes to the default slide duration. This also has the

// list with an ID selector referencing the scope context.

// loop

// loop again

// loop the function

// make sure the order of numbers/colors match with the END value.

// make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.

// makes the latter nonnegative.

// matchesSelector(:active) reports false when true (IE9/Opera 11.5)

// native event and prevent that from happening again here.

// nice side effect of matching slide speed if the user stopped moving before

// no element matchers and no seed.

// no getter for object

// nodeType < 6 works because attributes (2) do not appear as children

// nodeType defaults to 9, since context defaults to document

// non-xml :nth-child(...) stores cache data on `parent`

// normalized at this point

// note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!

// note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.

// nth-* requires argument

// numeric x and y parameters for Expr.filter.CHILD

// numerically zero.

// of the default converter is kludgy but it works.

// offset() relates an element's border box to the document origin

// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border

// on a disconnected node (IE 9)

// on detached elements

// on the option

// once despite the number of mutations.  Additional

// only backspace what doesn't match the previous string

// option.text throws exceptions (#14686, #14858)

// options in Safari work properly

// or :nth-last-child(...) or :nth(-last)?-of-type(...)

// or beginning with the identifier C immediately followed by "-".

// or if it's a new scroll (larger delta or inverse sign as last event before

// or strings [capture 3 or capture 4]"

// or when there is no matching style property that exists.

// otherwise step value is 2 to skip over Left and Right

// otherwise we skip this part

// otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause

// parseFloat NaNs numeric-cast false positives ("")

// pixelX, pixelY

// position() relates an element's margin box to its offset parent's padding box

// position:fixed elements are offset from the viewport, which itself always has zero offset

// potential future feature - allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos. Not sure it's worth the kb.

// prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

// progress_callbacks.lock

// progress_handlers.add( ... )

// progress_handlers.fire

// progress_handlers.lock

// promise.done = list.add

// promise.fail = list.add

// promise.progress = list.add

// properties to it so it needs to exist.

// protect against NaN

// pseudo-class names are case-insensitive

// push.apply(_, arraylike) throws on ancient WebKit

// qSA considers elements outside a scoping root when evaluating child or

// qSa(:focus) reports false when true (Chrome 21)

// rather than make the css module depend on the offset module, just check for it here

// recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.

// regarding Nodelist length in IE

// rejected_callbacks.disable

// rejected_handlers.add( ... )

// rejected_handlers.disable

// rejected_handlers.fire

// release memory in IE

// remember that false/true cast respectively to 0/1

// replace text with base text + typed characters

// reset margins

// respecting firingIndex overrides and runtime changes

// results is for internal usage only

// retrieved value as a content box dimension.

// revert defaults if set incorrectly

// same way that tag soup parsers do. So we cannot shorten

// set a placeholder for the current breakpoint

// set in CSS while `offset*` properties report correct values.

// setting a boolean content attribute,

// setting or getting the value

// show cursor

// shuffle the strings

// side scrolling on FF with DOMMouseScroll

// since it considers such accessions noop

// since it's otherwise lost when execution goes async

// since its presence should be enough

// since they are user-defined.

// single ^ are removed from string

// skip at least 1

// skip over any HTML chars

// so $("p:first").is("p:last") won't return true for a doc with two "p".

// so any parsed elements with URLs

// so migrate can support jQuery.sub (gh-2101)

// so that event delegation works in jQuery.

// so they're executed at the same time to save the second computation.

// so use a roundabout getElementsByName test

// some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()

// some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/

// some versions of this test; make sure not to make it pass there!

// something got wrong

// spaces as combinators

// specially universal or its namespaces are a superset of the event's.

// start typing each new char into existing string

// state = "rejected"

// state = "resolved" (i.e., fulfilled)

// strings and numbers (primitives or objects)

// strip out the escape character and pause value so they're not printed

// strip out the escape characters and append all the string in between

// strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()

// subordinate callback factory

// subordinate fulfillment data

// subsequent errors

// subtract characters one by one

// subtraction forces infinities to NaN

// supports it & if we're not changing the context.

// surrogate pair

// synthetic events by interrupting progress until reinvoked in response to

// temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

// text content of element

// that can be coerced to finite numbers (gh-2662)

// that pass the validator function

// that takes "flat" options (not to be deep extended)

// the `nonce` attribute is reset to an empty string whenever it

// the current scroll position's value, so that the elements are still positioned based on HTML layout

// the end of a momentum scroll by storing recent (N=15?) wheel events.

// the function does a lot of value caching for performance

// the master Deferred

// the order of strings

// the overflowX value there.

// the ready event fires. See #6781

// the remaining part of the current string is equal of the same part of the new string

// the select element.

// the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)

// then remove the whole classname (if there was one, the above saved it).

// there is still data from a stopped show/hide

// this by omitting <tbody> or other required elements.

// this implies that the user stopped moving a finger then released.

// this just defines when we can count on it).

// this throws a TypeError, but we will just return undefined.

// this will create an Interpolate function based on the snapGrids

// throw an exception if an attempt to read a data cache is made.

// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode

// timeout for any pause after a character

// timeout handle

// to avoid forcing a reflow.

// to avoid treating leading and trailing

// to give time for the deceleration to finish. Stop ignoring after 500 msecs

// to handle uncaught aborts

// to missing dependency), remove it.

// to wait for more events. Snap ASAP on the next tick.

// top or left is auto and position is either absolute or fixed

// triggers are redundant and are very costly

// two documents; shallow comparisons work.

// typing speed

// uncached part of the url

// unguarded in another place, it seems safer to define global only for this module

// use plain assignment

// user can override it through ajaxSetup method

// variable to check whether typing is currently paused

// via an object.

// want to modify the value if it is a CSS custom property

// want to query the value if it is a CSS custom property

// warn about them ASAP rather than swallowing them by default.

// we'll consider a scroll "complete" when there haven't been any wheel events

// webpackBootstrap

// when a statically positioned element is identified

// when an event is called after a page has unloaded

// when in an optgroup

// whenever `document.activeElement` is accessed on an iframe

// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order

// which value to return, respectively either:

// while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.

// will dequeue but only if they were gotoEnd.

// will not be confused with a leftover capture object.

// will result in `undefined` for elem = this[ 0 ] which will

// with both ajaxSettings and settings fields.

// with direct calls to dataPriv methods, these can be deprecated.

// x is the Grid of the scrolled scroller and y will be the controlled scroller

// xml :nth-child(...)

// xxx: for now i will just save one spline function to to

// you can add your own custom options here if

// }

// });

// },

// };

//# sourceMappingURL=swiper.esm.bundle.js.map

//%-based translations will fail unless we set the width/height to match the original target (and padding/borders can affect it)

//--- TRANSFORM-RELATED ---

//2D matrix

//Also make sure the overwriting doesn't overwrite THIS tween!!!

//CSS variable

//Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118

//Initialization tasks

//Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)

//ONLY for backward compatibility! Maybe delete?

//PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

//PropTween lookup. An array containing an object for each target, having keys for each tweening property

//The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.

//UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

//_propagateYoyoEase(this, isYoyo);

//a11

//a21

//a31

//a41

//add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)

//adjust the time for repeats and yoyos

//also ensures the core classes are initialized.

//as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

//b = beginning string

//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).

//build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.

//children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.

//copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

//could be during the repeatDelay part. No need to render and fire callbacks.

//css variables may not need caps swapped out for dashes and lowercase.

//don't allow a timeline to be added to itself as a child!

//don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

//don't pre-process function-based values or "random()" strings.

//duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.

//e = ending string

//ensure values are strings

//ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

//ensures that the initial values are recorded

//export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.

//finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.

//finds the string between parentheses.

//flag

//for backward compatibility. Leverage the timeline calls.

//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following

//for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"

//for handling transformOrigin values, stripping out the 3rd dimension

//for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.

//for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.

//for shorthand like #9F0

//force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

//forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)

//handle the zOrigin separately!

//if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

//if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.

//if relative values are found, just return the raw strings with the relative prefixes in place.

//if something like "perspective:300" is passed in and we must add a unit to the end

//if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.

//if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

//if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).

//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

//if the tween is positioned at the VERY beginning (_start 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.

//if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

//if there's an internal timeline, skip all the parsing because we passed that task down the chain.

//if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).

//if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)

//if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)

//in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete

//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

//in case any of the ancestors had completed but should now be enabled...

//in case it was already set (a PropTween can only have one modifier)

//in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence

//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

//in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.

//in case selector text or an array is passed in

//in case someone passes in an object that's not a plugin, like CustomEase

//in case something like "left top" or "bottom right" is passed in. Convert to percentages.

//in case the user had an onStart in the vars - we don't want to overwrite it.

//in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.

//in case there's a zero-duration tween that has a repeat with a repeatDelay

//in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.

//in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

//in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

//instance methods

//make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

//make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

//maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.

//modifier target

//moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

//n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.

//name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).

//nested timelines should never run backwards - the backwards-ness is in the child tweens.

//note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.

//note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.

//note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397

//note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

//note: old versions of IE use "removeAttribute()" instead of "removeProperty()"

//note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

//note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

//note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

//only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

//only numbers (including negatives and decimals) but NOT relative values.

//otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

//otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

//pass an array with the starting and ending values and let the filter do whatever it needs to the values.

//pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

//pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.

//plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.

//precalculate to optimize

//prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

//reads the arguments passed to one of the key methods and figures out if the user is defining things with the OLD/legacy syntax where the duration is the 2nd parameter, and then it adjusts things accordingly and spits back the corrected vars object (with the duration added if necessary, as well as runBackwards or startAt or immediateRender). type 0 = to()/staggerTo(), 1 = from()/staggerFrom(), 2 = fromTo()/staggerFromTo()

//record it here in case the tween changes position in the sequence...

//register core plugins

//repeatRefresh functionality

//replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])

//reports if the element is an SVG on which getBBox() actually works

//returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.

//rotationX

//rotationY

//rotationZ

//round in order to work around floating point errors

//round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

//searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.

//sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).

//so people can pass in a comma-delimited list of property names

//so that propagation works properly when a ancestor timeline yoyos

//some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

//some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)

//some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).

//some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

//someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

//sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.

//sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.

//sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

//special case for the global timeline (or any other that has no parent or detached parent).

//special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.

//speed optimization, faster lookups (no going up the prototype chain)

//split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).

//start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

//start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

//static methods

//store a reference temporarily so we can avoid overwriting itself.

//store the original

//takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.

//takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.

//takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.

//the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).

//the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

//the user provided them in the wrong order, so flip them

//there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.

//these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

//this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)

//this.add(target, "setAttribute", (target.getAttribute((p in target.dataset ? (p = "data-" + p) : p)) || 0) + "", vars[p], index, targets, 0, 0, p);

//timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);

//to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()

//to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

//tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.

//tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.

//unit

//used for nextLabel() and previousLabel()

//users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.

//we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.

//we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.

//we use the "c" of the PropTween to store the final part of the string (after the last number)

//we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

//we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,

//when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.

//when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

//when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

//when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

//when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)

//works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).

//zero should be interpreted as basically unlimited

//zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
